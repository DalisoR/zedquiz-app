-- This migration adds the necessary tables and columns for the tutor rewards system.
-- It is designed to be safely re-runnable.

-- 1. Create a table to log all actions that contribute to a tutor's score.
CREATE TABLE IF NOT EXISTS public.tutor_contribution_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tutor_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  action_type TEXT NOT NULL, -- e.g., 'QUIZ_CREATED', 'VIDEO_WATCHED'
  points_awarded INT NOT NULL,
  source_id UUID, -- The ID of the quiz, video, etc.
  student_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL, -- The student who triggered the action
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.tutor_contribution_log IS 'Logs every action that earns points for a tutor.';

-- 2. Create a table to track student-tutor follows.
CREATE TABLE IF NOT EXISTS public.student_follows (
  student_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  tutor_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (student_id, tutor_id)
);
COMMENT ON TABLE public.student_follows IS 'Tracks which students are following which tutors.';

-- 3. Create a table for content ratings.
CREATE TABLE IF NOT EXISTS public.content_ratings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content_id UUID NOT NULL, -- The ID of the quiz or video
  content_type TEXT NOT NULL, -- 'QUIZ' or 'VIDEO'
  student_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  tutor_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE (content_id, student_id) -- A student can only rate a piece of content once
);
COMMENT ON TABLE public.content_ratings IS 'Stores student ratings for tutor-created content.';

-- 4. Add new columns to the profiles table for tutors.
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS current_contribution_score INT DEFAULT 0,
ADD COLUMN IF NOT EXISTS average_rating NUMERIC(3, 2) DEFAULT 0.00,
ADD COLUMN IF NOT EXISTS total_followers INT DEFAULT 0,
ADD COLUMN IF NOT EXISTS total_earnings NUMERIC(10, 2) DEFAULT 0.00,
ADD COLUMN IF NOT EXISTS pending_earnings NUMERIC(10, 2) DEFAULT 0.00;

COMMENT ON COLUMN public.profiles.current_contribution_score IS 'The tutor''s score for the current reward period.';
COMMENT ON COLUMN public.profiles.average_rating IS 'The tutor''s average content rating from students.';
COMMENT ON COLUMN public.profiles.total_followers IS 'The number of students following the tutor.';
COMMENT ON COLUMN public.profiles.total_earnings IS 'The tutor''s lifetime earnings from the platform.';
COMMENT ON COLUMN public.profiles.pending_earnings IS 'The tutor''s earnings waiting to be paid out.';

-- 5. Enable RLS for the new tables.
ALTER TABLE public.tutor_contribution_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.student_follows ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.content_ratings ENABLE ROW LEVEL SECURITY;

-- 6. Define RLS policies.

-- Tutors can view their own contribution logs.
DROP POLICY IF EXISTS "Tutors can view their own contribution logs" ON public.tutor_contribution_log;
CREATE POLICY "Tutors can view their own contribution logs" 
ON public.tutor_contribution_log FOR SELECT
USING (auth.uid() = tutor_id);

-- Students can view their own follow relationships.
DROP POLICY IF EXISTS "Students can view their own follows" ON public.student_follows;
CREATE POLICY "Students can view their own follows" 
ON public.student_follows FOR SELECT
USING (auth.uid() = student_id);

-- Tutors can view who follows them.
DROP POLICY IF EXISTS "Tutors can see their followers" ON public.student_follows;
CREATE POLICY "Tutors can see their followers" 
ON public.student_follows FOR SELECT
USING (auth.uid() = tutor_id);

-- Authenticated users can create follow relationships.
DROP POLICY IF EXISTS "Authenticated users can follow tutors" ON public.student_follows;
CREATE POLICY "Authenticated users can follow tutors" 
ON public.student_follows FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- Students can unfollow tutors.
DROP POLICY IF EXISTS "Students can unfollow tutors" ON public.student_follows;
CREATE POLICY "Students can unfollow tutors" 
ON public.student_follows FOR DELETE
USING (auth.uid() = student_id);

-- Content ratings are public to view.
DROP POLICY IF EXISTS "Content ratings are public" ON public.content_ratings;
CREATE POLICY "Content ratings are public" 
ON public.content_ratings FOR SELECT
USING (true);

-- Students can create and update their own ratings.
DROP POLICY IF EXISTS "Students can manage their own ratings" ON public.content_ratings;
CREATE POLICY "Students can manage their own ratings" 
ON public.content_ratings FOR ALL
USING (auth.uid() = student_id)
WITH CHECK (auth.uid() = student_id);

-- Create indexes for performance.
CREATE INDEX IF NOT EXISTS idx_tutor_contribution_log_tutor_id ON public.tutor_contribution_log(tutor_id);
CREATE INDEX IF NOT EXISTS idx_student_follows_tutor_id ON public.student_follows(tutor_id);
CREATE INDEX IF NOT EXISTS idx_content_ratings_tutor_id ON public.content_ratings(tutor_id);
CREATE INDEX IF NOT EXISTS idx_content_ratings_content_id ON public.content_ratings(content_id);

