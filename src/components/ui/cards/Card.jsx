/\*\*

- @component ComponentName
- @category CategoryName
-
- @description
- Brief description of what this component does.
-
- @example
- ```js
- import { ComponentName } from './ComponentName';
-
- function Example() {
- return (
-     <ComponentName
-       prop1="value1"
-       prop2={value2}
-     />
- );
- }
- ```

```

 );
- }
- ```

```
-
- @prop {string} prop1 - Description of prop1
- @prop {number} prop2 - Description of prop2
- @prop {(value: any) => void} onSomething - Callback when something happens
-
- @see RelatedComponent
- @see AnotherComponent
  \*/

// Your component code here...
import PropTypes from 'prop-types';
import React from 'react';

/**
 * @component Navigation
 * @category ui
 *
 * @description
 * [Add component description]
 *
 * @example
 * ```jsx
* import { Navigation } from './Navigation';
 *
 * function Example() {
 *   return (
 *     <Navigation>
 *       [Add example usage]
 *     </Navigation>
 *   );
 * }
 *
```
 */

import { useNavigate, useLocation } from 'react-router-dom';

import { useAuth } from '../../contexts/AuthContext';

export function TopNav({ title }) {
  const navigate = useNavigate();
  const location = useLocation();
  const { profile } = useAuth();

  const canGoBack =
    location.pathname !== '/' &&
    location.pathname !== '/dashboard' &&
    location.pathname !== '/teacher' &&
    location.pathname !== '/admin';

  const onBack = () => navigate(-1);
  const onHome = () => {
    if (profile?.role === 'super-admin') navigate('/admin');
    else if (profile?.role === 'teacher') navigate('/teacher');
    else navigate('/dashboard');
  };
  return (
    <div
      style={{
        position: 'sticky',
        top: 0,
        zIndex: 50,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        padding: '0.75rem 1rem',
        background: 'rgba(255,255,255,0.95)',
        backdropFilter: 'blur(10px)',
        borderBottom: '1px solid #eee',
      }}
    >
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        {canGoBack && (
          <button
            type="button"
            onClick={onBack}
            style={{
              width: 'auto',
              background: '#6b7280',
              padding: '0.5rem 0.75rem',
            }}
          >
            Back
          </button>
        )}
        <button
          type="button"
          onClick={onHome}
          style={{
            width: 'auto',
            background: '#1E8449',
            padding: '0.5rem 0.75rem',
          }}
        >
          Home
        </button>
      </div>
      {title ? <div style={{ fontWeight: 600 }}>{title}</div> : <span />}
      <span />
    </div>
  );
}

export function BottomNav() {
  const navigate = useNavigate();
  const { profile } = useAuth();
  const isTeacher = profile?.role === 'teacher';
  const items = isTeacher
    ? [
        { key: '/teacher', label: 'Dashboard' },
        { key: '/teacher/bookings', label: 'Bookings' },
        { key: '/teacher/availability', label: 'Availability' },
        { key: '/teacher/earnings', label: 'Earnings' },
      ]
    : [
        { key: '/dashboard', label: 'Home' },
        { key: '/teachers', label: 'Teachers' },
        { key: '/leaderboard', label: 'Leaderboard' },
        { key: '/upgrade', label: 'Upgrade' },
      ];

  return (
    <nav
      style={{
        position: 'fixed',
        bottom: 0,
        left: 0,
        right: 0,
        background: 'white',
        borderTop: '1px solid #e5e7eb',
        display: 'grid',
        gridTemplateColumns: `repeat(${items.length}, 1fr)`,
        gap: '0.25rem',
        padding: '0.5rem',
        zIndex: 40,
      }}
    >
      {items.map(item => (
        <button
          key={item.key}
          type="button"
          onClick={() => navigate(item.key)}
          style={{
            width: '100%',
            padding: '0.5rem',
            borderRadius: 8,
            background: '#f8fafc',
            color: '#111827',
            fontWeight: 600,
          }}
        >
          {item.label}
        </button>
      ))}
    </nav>
  );
}
import React from 'react';
import PropTypes from 'prop-types';

/**
 * @component Navigation
 * @category ui
 *
 * @description
 * [Add component description]
 *
 * @example
 * ```jsx
* import { Navigation } from './Navigation';
 *
 * function Example() {
 *   return (
 *     <Navigation>
 *       [Add example usage]
 *     </Navigation>
 *   );
 * }
 *
```
 */

import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

export function TopNav({ title }) {
  const navigate = useNavigate();
  const location = useLocation();
  const { profile } = useAuth();

  const canGoBack =
    location.pathname !== '/' &&
    location.pathname !== '/dashboard' &&
    location.pathname !== '/teacher' &&
    location.pathname !== '/admin';

  const onBack = () => navigate(-1);
  const onHome = () => {
    if (profile?.role === 'super-admin') navigate('/admin');
    else if (profile?.role === 'teacher') navigate('/teacher');
    else navigate('/dashboard');
  };
  return (
    <div
      style={{
        position: 'sticky',
        top: 0,
        zIndex: 50,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        padding: '0.75rem 1rem',
        background: 'rgba(255,255,255,0.95)',
        backdropFilter: 'blur(10px)',
        borderBottom: '1px solid #eee',
      }}
    >
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        {canGoBack && (
          <button
            type="button"
            onClick={onBack}
            style={{
              width: 'auto',
              background: '#6b7280',
              padding: '0.5rem 0.75rem',
            }}
          >
            Back
          </button>
        )}
        <button
          type="button"
          onClick={onHome}
          style={{
            width: 'auto',
            background: '#1E8449',
            padding: '0.5rem 0.75rem',
          }}
        >
          Home
        </button>
      </div>
      {title ? <div style={{ fontWeight: 600 }}>{title}</div> : <span />}
      <span />
    </div>
  );
}

export function BottomNav() {
  const navigate = useNavigate();
  const { profile } = useAuth();
  const isTeacher = profile?.role === 'teacher';
  const items = isTeacher
    ? [
        { key: '/teacher', label: 'Dashboard' },
        { key: '/teacher/bookings', label: 'Bookings' },
        { key: '/teacher/availability', label: 'Availability' },
        { key: '/teacher/earnings', label: 'Earnings' },
      ]
    : [
        { key: '/dashboard', label: 'Home' },
        { key: '/teachers', label: 'Teachers' },
        { key: '/leaderboard', label: 'Leaderboard' },
        { key: '/upgrade', label: 'Upgrade' },
      ];

  return (
    <nav
      style={{
        position: 'fixed',
        bottom: 0,
        left: 0,
        right: 0,
        background: 'white',
        borderTop: '1px solid #e5e7eb',
        display: 'grid',
        gridTemplateColumns: `repeat(${items.length}, 1fr)`,
        gap: '0.25rem',
        padding: '0.5rem',
        zIndex: 40,
      }}
    >
      {items.map((item) => (
        <button
          key={item.key}
          type="button"
          onClick={() => navigate(item.key)}
          style={{
            width: '100%',
            padding: '0.5rem',
            borderRadius: 8,
            background: '#f8fafc',
            color: '#111827',
            fontWeight: 600,
          }}
        >
          {item.label}
        </button>
      ))}
    </nav>
  );
}
ground: '#f8fafc',
            color: '#111827',
            fontWeight: 600,
          }}
        >
          {item.label}
        </button>
      ))}
    </nav>
  );
}
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
mport PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
port PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ort PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
rt PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
t PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
opTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
pTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
Types from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
pes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
es from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
s from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
rom 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
om 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
m 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
rop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
op-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
p-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ypes';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
pes';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
es';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
s';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
';
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
;
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
import styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
port styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
rt styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 styles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
tyles from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
les from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
s from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
from './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
om './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 './Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
./Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
Card.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
rd.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
.module.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
odule.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ule.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
e.css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
css';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
s';

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
;

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

/**
 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

 * @component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
@component Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
onent Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 Card
 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

 * @category UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ategory UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
y UI Components
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
omponents
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
nts
 * 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 
 * @description
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
escription
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
on
 * A versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
versatile card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 card component that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ponent that provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
at provides a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
es a consistent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
istent container for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ntainer for content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
or content with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
t with
 * various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 various visual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
isual styles and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
es and optional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ional header elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
er elements.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
s.
 * 
 * @example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
@example
 * ```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
```jsx
* import { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
rt { Card } from './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```javascript
*/
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
om './Card';
 * 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
* 
 * function Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
*/
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
Example() {
 *   return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 return (
 *     <Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
*/
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
<Card 
 *       title="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
tle="Card Title"
 *       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
*/
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
       subtitle="Optional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
ional subtitle"
 *       variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
*/
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
     variant="highlighted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
hted"
 *       action={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
*/
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
={<button>Action</button>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
on>}
 *     >
 *       Card content goes here
 *     </Card>
 *   );
 * }
 *
```
*/
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 Card content goes here
 *     </Card>
 *   );
 * }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 *     </Card>
 *   );
 * }
 *
```
*/
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 }
 *
```
 */
export const Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
Card = ({ 
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
t = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
  title,
  subtitle,
  action,
  noPadding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
Padding = false,
  ...props 
}) => {
  const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 const variantClass = styles[variant] || styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
styles.default;
  const paddingClass = noPadding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
Padding ? '' : styles.padding;
  const containerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
tainerClass = `${styles.card} ${variantClass} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
s} ${className}`;

  return (
    <div className={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
sName={containerClass} {...props}>
      {(title || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
le || action) && (
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
es.header}>
          <div className={styles.headerContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
derContent}>
            <div>
              {title && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
le && <h3 className={styles.title}>{title}</h3>}
              {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
            {subtitle && <p className={styles.subtitle}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
le}>{subtitle}</p>}
            </div>
            {action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
action && <div className={styles.action}>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
 className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;

};

Card.propTypes = {
  /** The content to be rendered inside the card */
  children: PropTypes.node.isRequired,
  /** The visual style variant of the card */
  variant: PropTypes.oneOf(['default', 'highlighted', 'error', 'success']),
  /** Additional CSS classes to apply */
  className: PropTypes.string,
  /** The card's title */
  title: PropTypes.node,
  /** The card's subtitle */
  subtitle: PropTypes.node,
  /** Action element to display in the header (e.g., button) */
  action: PropTypes.node,
  /** Whether to remove default padding */
  noPadding: PropTypes.bool,
};

Card.defaultProps = {
  variant: 'default',
  className: '',
  noPadding: false,
};

export default Card;
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiAward, FiShoppingBag, FiDollarSign, FiStar, FiClock, FiCheckCircle } from 'react-icons/fi';
import ChildConnectionRequests from '../parent/ChildConnectionRequests';
import { useAuth } from '../../contexts/AuthContext';
import { Button, Card, LoadingSpinner, Table } from '../ui';
import styles from './StudentDashboard.module.css';

/**
 * @component StudentDashboard
 * @category Student Components
 * 
 * @description
 * Dashboard component for student users. Displays student information,
 * quiz history, subscription status, and available features.
 * 
 * @example
 * ```jsx
* import { StudentDashboard } from './StudentDashboard';
 * 
 * function App() {
 *   return (
 *     <StudentDashboard />
 *   );
 * }
 *
```
 */
export const StudentDashboard = () => {
  const navigate = useNavigate();
  const { profile: currentUser } = useAuth();
  const [quizHistory, setQuizHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  const [applicationStatus, setApplicationStatus] = useState(null);
  const [quizzesToday, setQuizzesToday] = useState(0);
  const [loadingQuizzesToday, setLoadingQuizzesToday] = useState(true);

  const dailyQuizLimit = 3;

  useEffect(() => {
    const fetchDashboardData = async () => {
      setLoadingHistory(true);
      setLoadingQuizzesToday(true);

      try {
        // Fetch quiz history
        const { data: historyData, error: historyError } = await supabase
          .from('quiz_history')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });

        if (historyError) throw historyError;
        setQuizHistory(historyData || []);

        // Check for a tutor application
        const { data: appData } = await supabase
          .from('tutor_applications')
          .select('status')
          .eq('user_id', currentUser.id)
          .single();
        
        if (appData) {
          setApplicationStatus(appData.status);
        }

        // Fetch today's quiz count if user is on the free tier
        if (currentUser.subscription_tier === 'free') {
          const { data: countData, error: countError } = await supabase.rpc('count_recent_quizzes', {
            p_user_id: currentUser.id
          });

          if (countError) throw countError;
          setQuizzesToday(countData);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoadingHistory(false);
        setLoadingQuizzesToday(false);
      }
    };

    fetchDashboardData();
  }, [currentUser.id, currentUser.subscription_tier]);

  const canTakeQuiz = currentUser.subscription_tier !== 'free' || quizzesToday < dailyQuizLimit;

  return (
    <div className={styles.dashboard}>
      <header className={styles.dashboardHeader}>
        <h2>Welcome, {currentUser.full_name || 'Student'}</h2>
        <div className={styles.headerActions}>
          <Button 
            variant="secondary" 
            onClick={() => navigate('/leaderboard')}
            className={styles.headerButton}
          >
            🏆 Leaderboard
          </Button>
          <Button 
            variant="primary" 
            onClick={() => navigate('/teachers')}
            className={styles.headerButton}
          >
            👨‍🏫 Browse Tutors
          </Button>
          <Button 
            variant="outline" 
            onClick={() => supabase.auth.signOut()}
          >
            Sign Out
          </Button>
        </div>
      </header>

      <div className={styles.contentBody}>
        <ChildConnectionRequests user={currentUser} />
        
        {applicationStatus && (
          <Card className={styles.tutorApplicationCard}>
            <Card.Header>
              <h3>Teacher Application Status</h3>
            </Card.Header>
            <Card.Body>
              <p>Your application to become a teacher is currently: <strong>{applicationStatus}</strong></p>
            </Card.Body>
          </Card>
        )}

        <div className={styles.dashboardGrid}>
          <Card className={styles.profileInfo}>
            <Card.Header>
              <h3>My Profile</h3>
            </Card.Header>
            <Card.Body>
              <p><strong>School:</strong> {currentUser.school_name || 'Not set'}</p>
              <p><strong>Grade:</strong> {currentUser.grade_level || 'Not set'}</p>
              <div className={styles.subscriptionStatus}>
                <strong>Subscription:</strong> 
                <span className={`${styles.tierBadge} ${styles[currentUser.subscription_tier]}`}>
                  {currentUser.subscription_tier}
                  {currentUser.subscription_tier === 'premium' && <FiStar className={styles.premiumIcon} />}
                </span>
                <Button 
                  variant="primary"
                  size="sm"
                  onClick={() => navigate('/subscriptions')}
                >
                  {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage'}
                </Button>
              </div>
            </Card.Body>
          </Card>
              
          <div className={styles.quickStats}>
            <div className={styles.statItem}>
              <FiAward className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {currentUser.points_balance || 0}
                </div>
                <div className={styles.statLabel}>Points</div>
              </div>
            </div>
            <div className={styles.statItem}>
              <FiClock className={styles.statIcon} />
              <div>
                <div className={styles.statValue}>
                  {dailyQuizLimit - (currentUser.subscription_tier === 'free' ? quizzesToday : 0)}/{dailyQuizLimit}
                </div>
                <div className={styles.statLabel}>Quizzes Left</div>
              </div>
            </div>
          </div>

          <Card className={styles.startQuiz}>
            <Card.Header>
              <h3>Ready to test your knowledge?</h3>
            </Card.Header>
            <Card.Body>
              {loadingQuizzesToday ? (
                <LoadingSpinner size="sm" />
              ) : canTakeQuiz ? (
                <>
                  <p>You have <strong>{dailyQuizLimit - quizzesToday}</strong> free quizzes left today.</p>
                  <Button 
                    variant="primary" 
                    size="lg" 
                    onClick={() => navigate('/subjects')}
                  >
                    Start New Quiz
                  </Button>
                </>
              ) : (
                <div className={styles.limitReached}>
                  <p>You've used all your free quizzes for today!</p>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate('/upgrade')}
                  >
                    Upgrade to Premium
                  </Button>
                </div>
              )}
              <Button 
                variant="secondary" 
                onClick={() => navigate('/leaderboard')} 
                className={styles.leaderboardButton}
              >
                View Leaderboard
              </Button>
            </Card.Body>
          </Card>
        </div>

        <div className={styles.dashboardGrid}>
          <Card className={styles.manageLessonsCard}>
            <Card.Header>
              <h3>Manage Your Lessons</h3>
            </Card.Header>
            <Card.Body>
              <p>Schedule and manage your tutoring sessions.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/lessons')}
              >
                View My Lessons
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.premiumFeatures}>
            <Card.Header>
              <h3><FiStar className={styles.cardIcon} /> Premium Features</h3>
            </Card.Header>
            <Card.Body>
              <ul className={styles.premiumList}>
                <li><FiCheckCircle /> Unlimited daily quizzes</li>
                <li><FiCheckCircle /> Advanced analytics</li>
                <li><FiCheckCircle /> Priority support</li>
                <li><FiCheckCircle /> Ad-free experience</li>
              </ul>
              <Button 
                variant="primary"
                onClick={() => navigate('/subscriptions')}
              >
                {currentUser.subscription_tier === 'free' ? 'Upgrade Now' : 'Manage Subscription'}
              </Button>
            </Card.Body>
          </Card>

          <Card className={styles.paymentCard}>
            <Card.Header>
              <h3><FiDollarSign className={styles.cardIcon} /> Payment & Billing</h3>
            </Card.Header>
            <Card.Body>
              <p>Manage your subscription, view payment history, and update billing information.</p>
              <div className={styles.paymentButtons}>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/subscription/manage')}
                  className={styles.managementButton}
                >
                  Manage Subscription
                </Button>
                <Button 
                  variant="secondary"
                  onClick={() => navigate('/payment/history')}
                >
                  Payment History
                </Button>
              </div>
            </Card.Body>
          </Card>

          <Card className={styles.shopCard}>
            <Card.Header>
              <h3><FiShoppingBag className={styles.cardIcon} /> Premium Shop</h3>
            </Card.Header>
            <Card.Body>
              <p>Purchase premium content, study guides, and exam prep materials.</p>
              <Button 
                variant="primary"
                onClick={() => navigate('/shop')}
              >
                Visit Shop
              </Button>
            </Card.Body>
          </Card>
        </div>
        
        <Card className={styles.quizHistory}>
          <Card.Header>
            <div className={styles.quizHistoryHeader}>
              <h3>My Recent Quizzes</h3>
              <Button 
                variant="text"
                onClick={() => navigate('/subjects')}
                disabled={!canTakeQuiz}
              >
                Take New Quiz
              </Button>
            </div>
          </Card.Header>
          <Card.Body>
            {loadingHistory ? (
              <LoadingSpinner />
            ) : quizHistory.length > 0 ? (
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell>Subject</Table.HeaderCell>
                    <Table.HeaderCell>Date</Table.HeaderCell>
                    <Table.HeaderCell>Score</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {quizHistory.map(item => (
                    <Table.Row key={item.id}>
                      <Table.Cell>{item.subject}</Table.Cell>
                      <Table.Cell>{new Date(item.created_at).toLocaleDateString()}</Table.Cell>
                      <Table.Cell><strong>{item.score}/{item.total_questions}</strong></Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            ) : (
              <p>You haven't completed any quizzes yet.</p>
            )}
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

StudentDashboard.propTypes = {
  // This component doesn't accept any props
};

export default StudentDashboard;
import React from 'react';
import PropTypes from 'prop-types';
import styles from './Card.module.css';

/**
 * @component Card
 * @category cards
 *
 * @description
 * [Add component description]
 *
 * @example
 * ```jsx
 * import { Card } from './Card';
 *
 * function Example() {
 *   return (
 *     <Card>
 *       [Add example usage]
 *     </Card>
 *   );
 * }
 * ```
 */

// Convert the existing component content
import React from 'react';

const variants = {
  default: 'bg-white',
  highlighted: 'bg-blue-50',
  error: 'bg-red-50',
  success: 'bg-green-50',
};

const Card = ({
  children,
  variant = 'default',
  className = '',
  title,
  subtitle,
  action,
  noPadding = false,
  ...props
}) => {
  const baseClasses = 'rounded-lg shadow-sm border border-gray-200';
  const variantClasses = variants[variant] || variants.default;
  const paddingClass = noPadding ? '' : 'p-6';

  return (
    <div className={`${baseClasses} ${variantClasses} ${className}`} {...props}>
      {(title || action) && (
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <div>
              {title && (
                <h3 className="text-lg font-medium text-gray-900">{title}</h3>
              )}
              {subtitle && (
                <p className="mt-1 text-sm text-gray-500">{subtitle}</p>
              )}
            </div>
            {action && <div>{action}</div>}
          </div>
        </div>
      )}
      <div className={paddingClass}>{children}</div>
    </div>
  );
};

Card.propTypes = {
  // Add prop types
};

Card.defaultProps = {
  // Add default props
};

export default Card;
